<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="bookcafe.cart.serviceImpl.CartMapper">

	<!-- 장바구니 담기 -->
    <insert id="insertCart" parameterType="bookcafe.cart.service.CartVO">
    INSERT INTO CART (USER_CODE, PRODUCT_CODE, ORDER_QUANTITY, CART_CODE)
    VALUES (
        #{user_code},
        #{product_code},
        #{order_quantity},
        <choose>
            <when test="cart_code == null or cart_code == ''">
                fnCode('cart')
            </when>
            <otherwise>
                #{cart_code}
            </otherwise>
        </choose>
    )
	</insert>
	
	<!-- 주문하기 -->
	<insert id="insertOrder" parameterType="bookcafe.cart.service.OrdersVO">
		INSERT INTO ORDERS (
			ORDER_CODE,
			ADMIN_CODE,
			USER_CODE,
			CART_CODE,
			ORDER_STATE,
			TOTAL_PRICE,
			PAYMENT_DATE,
			PAYMENT_STATE)
		VALUES (
			fnCode('order'),
			'AD001',
			#{user_code},
			#{cart_code},
			1,
			#{total_price},
			date_format(now(),'%Y%m%d%H%i%s'),
			1)
	</insert>
	
	<!-- 오더코드 갯수 조회 -->
	<select id="selectOrders" resultType="int">
		SELECT COUNT(*)
		FROM ORDERS
		WHERE CART_CODE = #{cart_code}
	</select>
	
	<!-- 오더코드 정보 조회 -->
	<select id="selectOrderCode" resultType="String">
		SELECT ORDER_CODE
		FROM ORDERS
		WHERE CART_CODE = #{cart_code}
	</select>
	<select id="selectOrdersInfo" resultType="bookcafe.cart.service.OrdersVO">
		SELECT * 
		FROM ORDERS
		WHERE ORDER_CODE = #{order_code}
	</select>
	<!-- 장바구니 리스트 가져오기 -->
	<select id="selectCartList" resultType="bookcafe.cart.service.CartVO">
		SELECT 
			C.CART_CODE, 
			C.USER_CODE, 
			F.PRODUCT_CODE, 
		    F.PRODUCT_NAME, 
		    F.PRODUCT_PRICE, 
		    F.PRODUCT_QUANTITY,
		    SUM(C.ORDER_QUANTITY) AS ORDER_QUANTITY 
	    FROM 
	        CART C 
	    JOIN 
	        FOOD F 
	    ON 
	        C.PRODUCT_CODE = F.PRODUCT_CODE 
	    WHERE 
	        C.USER_CODE = #{user_code}
	    AND 
	    	C.CART_CODE = #{cart_code}
    	GROUP BY 
	        C.CART_CODE, 
	        C.USER_CODE, 
	        F.PRODUCT_CODE, 
	        F.PRODUCT_NAME, 
	        F.PRODUCT_PRICE
	    ORDER BY F.PRODUCT_CODE;
	</select>
	
	<select id="selectCartCode" parameterType="String" resultType="bookcafe.cart.service.CartVO">
    	SELECT USER_CODE, MAX(CART_CODE) as CART_CODE
    	FROM CART 
    	WHERE USER_CODE = #{user_code};
	</select>
	
	<!-- 최근 카트코드 가져오기 -->
	<select id="selectMaxCartCode" resultType="String">
    	SELECT MAX(CART_CODE) as CART_CODE
    	FROM CART 
    	WHERE USER_CODE = #{user_code};
	</select>
	
	<!-- 장바구니 항목삭제 -->
	<delete id="deleteCart" >
  		DELETE FROM CART 
		WHERE USER_CODE = #{user_code}
		AND PRODUCT_CODE = #{product_code}
		AND CART_CODE = #{cart_code}
	</delete>
	
	<!-- 총 금액 계산하기(카트리스트) -->
	<select id="selectTotalPrice" parameterType="string" resultType="Integer">
	    SELECT 
		    SUM(f.product_price * c.order_quantity) AS total_price
		FROM 
		    CART c
		JOIN 
		    FOOD f 
		ON 
		    c.product_code = f.product_code
		JOIN
		    USER u
		ON
		    c.user_code = u.user_code
		WHERE 
		    c.cart_code = #{cart_code}
	</select>
	
	<!-- 재고 업데이트 -->
	<update id="updateQuantity" parameterType="String">
		UPDATE FOOD
		SET product_quantity = product_quantity - (
		    SELECT SUM(order_quantity)
		    FROM CART
		    WHERE CART.cart_code = #{cart_code}
		)
		WHERE product_code IN (
		    SELECT product_code
		    FROM CART
		    WHERE CART.cart_code = #{cart_code}
		);
	</update>
	
	<!-- 장바구니 수량 뽑기 -->
	<select id="selectQuantitiy" parameterType="String" resultType="java.util.Map">
		SELECT  PRODUCT_CODE , ORDER_QUANTITY 
		  FROM CART 
		 WHERE CART_CODE = #{cart_code};
	</select>
	
	<!-- 장바구니 수량으로 재고 감소시키기  -->
	<update id="updateQuantity2" >
		UPDATE FOOD 
		SET PRODUCT_QUANTITY = PRODUCT_QUANTITY - #{ORDER_QUANTITY}
   		WHERE PRODUCT_CODE  = #{PRODUCT_CODE}
	</update>
	
	<!-- 책대여 권한 업데이트  -->
	<update id="canReadBook">
		UPDATE USER
	    SET USER_LEADBOOK = 'Y'
	    WHERE USER_CODE = (
	        SELECT USER_CODE
	        FROM CART
	        WHERE CART_CODE = #{cart_code} AND PRODUCT_CODE = 'food_014'
	    )
	    AND USER_CODE = #{user_code};
	</update>
	<!-- 책대여 권한 확인하기 -->
	<select id="selectReadBook" parameterType="string" resultType="string">
		SELECT USER_LEADBOOK
		FROM USER
		WHERE USER_CODE = #{user_code}
	</select>
	<!-- 최근 오더코드 조회 -->
	<select id="getLastInsertOrderCode" parameterType="string" resultType="string">
	    SELECT ORDER_CODE 
	    FROM ORDERS 
	    WHERE USER_CODE = #{user_code}
	    ORDER BY PAYMENT_DATE DESC
	    LIMIT 1;
	</select>
	
	<!-- 총금액 계산(오더리스트) -->
	<select id="getTotalPrice" parameterType="string" resultType="Integer">
	    SELECT total_price 
	    FROM ORDERS 
	    WHERE order_code = #{order_code}
	</select>
	
	<!--바로구매 cart insert :삭제예정 -->
    <insert id="directInsertCart" parameterType="bookcafe.cart.service.CartVO">
    INSERT INTO CART (USER_CODE, PRODUCT_CODE, ORDER_QUANTITY, CART_CODE)
    VALUES (
        #{user_code},
        #{product_code},
        #{order_quantity},
        <choose>
            <when test="cart_code == null or cart_code == ''">
                fnCode('cart')
            </when>
            <otherwise>
                #{cart_code}
            </otherwise>
        </choose>
	    )
	</insert>
	
	<!--바로구매 orders insert-->
	<insert id="directInsertOrders" parameterType="bookcafe.cart.service.OrdersVO">
		INSERT INTO ORDERS (
			ORDER_CODE,
			ADMIN_CODE,
			USER_CODE,
			CART_CODE,
			ORDER_STATE,
			TOTAL_PRICE,
			PAYMENT_DATE,
			PAYMENT_STATE)
		VALUES (fnCode('order'),
			'AD001',
			#{user_code},
			#{cart_code},
			1,
			#{total_price},
			date_format(now(),'%Y%m%d%H%i%s'),
			1)
	</insert>
	
	<!-- 바로구매시 장바구니 카트번호 업데이트1 -->
	<update id="updateCartcode">
		UPDATE CART
		SET CART_CODE= (
			SELECT CONCAT('cart_',CAST(LPAD(lastval(cart_seq)+1,'3','0') AS CHAR))
			)
		WHERE CART_CODE = #{cart_code}
	</update>
	
	<!-- 바로구매시 장바구니 카트번호 업데이트2 -->
	<select id="updateSeq" resultType="int">
		SELECT NEXTVAL(cart_seq) FROM DUAL;
	</select>
	
	
	<update id="updateQuantity1" parameterType="map">
	    UPDATE CART
	    SET order_quantity = #{order_quantity, jdbcType=INTEGER}
	    WHERE cart_code = #{cart_code} AND product_code = #{product_code}
	</update>
	
	<update id="minusQuantity" parameterType="map">
	    UPDATE CART
	    SET order_quantity = order_quantity - #{order_quantity, jdbcType=INTEGER}
	    WHERE cart_code = #{cart_code} AND product_code = #{product_code}
	</update>
	
	<!--  장바구니 숫자 조회 -->
    <select id="getCurrentCartSize" parameterType="string" resultType="int">
        SELECT COUNT(*)
		FROM (
		    SELECT PRODUCT_CODE
		    FROM CART
		    WHERE USER_CODE = #{user_code}
		    AND CART_CODE NOT IN (
		        SELECT CART_CODE
		        FROM ORDERS
		        WHERE USER_CODE = #{user_code}
		    )
		    GROUP BY PRODUCT_CODE
		) AS count
    </select>
	<!-- 카트에 똑같은 제품이 있나 확인 -->
	<select id="selectCartItem" parameterType="map" resultType="bookcafe.cart.service.CartVO">
	    SELECT * 
	    FROM CART 
	    WHERE USER_CODE = #{user_code} 
	      AND PRODUCT_CODE = #{product_code} 
	      AND CART_CODE = #{cart_code}
	</select>
	
	<!-- 수량 업데이트 -->
	<update id="updateCartItem" parameterType="bookcafe.cart.service.CartVO">
	    UPDATE CART
	    SET ORDER_QUANTITY = #{order_quantity}
	    WHERE USER_CODE = #{user_code}
	      AND PRODUCT_CODE = #{product_code}
	      AND CART_CODE = #{cart_code}
	</update>
	
	<!-- 영수증 뽑기 (메뉴정보) -->
	<select id="selectReceiptOrder" parameterType="String" resultType="bookcafe.cart.service.ReceiptVO">
		SELECT
		    o.ORDER_CODE,
		    f.PRODUCT_NAME,
		    f.PRODUCT_CODE,
		    c.ORDER_QUANTITY,
		    c.ORDER_QUANTITY * f.PRODUCT_PRICE AS PRODUCT_AMOUNT
		FROM
		    ORDERS o
		JOIN
		    CART c ON o.CART_CODE = c.CART_CODE
		JOIN
		    FOOD f ON c.PRODUCT_CODE = f.PRODUCT_CODE
		WHERE
		    o.ORDER_CODE = 	#{order_code}
	</select>
	<!-- 영수증 뽑기 (결제정보) -->
	<select id="selectReceiptInfo" parameterType="String" resultType="bookcafe.cart.service.ReceiptVO">
		SELECT
		    o.TOTAL_PRICE,
		    o.PAYMENT_DATE,
		    SUM(f.PRODUCT_PRICE * c.ORDER_QUANTITY) AS TOTAL_AMOUNT
		FROM
		    ORDERS o
		JOIN
		    CART c ON o.CART_CODE = c.CART_CODE
		JOIN
		    FOOD f ON c.PRODUCT_CODE = f.PRODUCT_CODE
		WHERE
		    o.ORDER_CODE = #{order_code}  
		GROUP BY
		    o.TOTAL_PRICE, o.PAYMENT_DATE
	</select>
	<!-- 영수증 뽑기 (포인트) -->
	<select id="selectReceiptPoint" parameterType="String" resultType="bookcafe.cart.service.ReceiptVO">
		WITH POINTLOG_RANKED AS (
		    SELECT
		        P.*,
		        ROW_NUMBER() OVER (PARTITION BY P.ORDER_CODE ORDER BY P.POINT_CODE DESC) AS RN
		    FROM
		        POINTLOG P
		    WHERE
		        P.ORDER_CODE = #{order_code}  
		)
		SELECT
		    P1.POINT_CODE AS POINT_CODE1,
		    P1.POINT_CHANGE AS POINT_CHANGE1,
		    P2.POINT_CODE AS POINT_CODE2,
		    P2.POINT_CHANGE AS POINT_CHANGE2
		FROM
		    ORDERS O
		LEFT JOIN
		    POINTLOG_RANKED P1 ON O.ORDER_CODE = P1.ORDER_CODE AND P1.RN = 1
		LEFT JOIN
		    POINTLOG_RANKED P2 ON O.ORDER_CODE = P2.ORDER_CODE AND P2.RN = 2
		WHERE
		    O.ORDER_CODE = #{order_code}
	</select>
</mapper>