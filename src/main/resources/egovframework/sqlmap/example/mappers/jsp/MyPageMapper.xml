<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bookcafe.myPage.serviceImpl.MyPageMapper">

	<!-- 비밀번호 변경하기 -->
	<update id="updatePassword">
		UPDATE USER SET
			USER_PASS = #{newPassword}
		WHERE USER_ID = #{user_id}
	</update>
	
	<!-- 회원정보 수정하기 -->
	<update id="updateMember">
		UPDATE USER SET
			USER_TEL = #{user_tel},
			USER_EMAIL = #{user_email},
			USER_ADDRESS = #{user_address}
		WHERE USER_ID = #{user_id}
	</update>
	
	<!-- 전화번호 중복 확인하기 -->
	<select id="checkDupTel" resultType="int">
		SELECT COUNT(USER_TEL) 
		FROM USER 
		WHERE USER_TEL = #{user_tel}
	</select>

	<!-- 회원정보 삭제하기 -->
	<update id="deleteMember">
		UPDATE USER SET
			USER_AUTHORITY = "5"
		WHERE USER_ID = #{user_id}
	</update>
	
	<!-- 3개월 구매금액 조회하기 -->
	<select id="getMyPurchaseAmount" resultType="Integer">
		SELECT SUM(TOTAL_PRICE) AS TOTAL_PURCHASE_AMOUNT
		FROM ORDERS
		WHERE USER_CODE = #{user_code} 
  		AND PAYMENT_DATE >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH);
	</select>
	
	<!-- 카페주문내역 조회하기(전체내역) -->
 	<select id="getMyOrderList" resultType="bookcafe.myPage.service.MyOrderDTO">
		SELECT *
		FROM (
		    SELECT
		        O.*,
		        C.PRODUCT_CODE,
		        F.PRODUCT_NAME,
		        C.WHOLE_QUANTITY,
		        ROW_NUMBER() OVER (ORDER BY O.PAYMENT_DATE ASC) AS ROWNUM
		    FROM
		        ORDERS O
		    JOIN (
		        SELECT
		            CART_CODE,
		            PRODUCT_CODE,
		            SUM(ORDER_QUANTITY) AS WHOLE_QUANTITY
		        FROM
		            CART
		        GROUP BY
		            CART_CODE
		    ) C ON O.CART_CODE = C.CART_CODE
		    JOIN FOOD F ON C.PRODUCT_CODE = F.PRODUCT_CODE
		    WHERE
		        O.USER_CODE = #{user_code}
 		        <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
	             	AND DATE_FORMAT(O.PAYMENT_DATE, '%Y%m%d') 
	             	BETWEEN DATE_FORMAT(#{startDate}, '%Y%m%d') AND DATE_FORMAT(#{endDate}, '%Y%m%d')
         		</if>
		    GROUP BY
		        O.ORDER_CODE
		) AS T
		ORDER BY ROWNUM DESC;
  	</select>
  	
	<!-- 카페주문내역 조회하기(오늘날짜) -->
 	<select id="getMyOrder" resultType="bookcafe.myPage.service.MyOrderDTO">
		SELECT
        O.*,
        C.PRODUCT_CODE,
        F.PRODUCT_NAME,
        F.PRODUCT_PATH,
        C.WHOLE_QUANTITY
	    FROM
	        ORDERS O
	    JOIN (
	        SELECT
	            CART_CODE,
	            PRODUCT_CODE,
	            SUM(ORDER_QUANTITY) AS WHOLE_QUANTITY
	        FROM
	            CART
	        GROUP BY
	            CART_CODE
	    ) C ON O.CART_CODE = C.CART_CODE
	    JOIN FOOD F ON C.PRODUCT_CODE = F.PRODUCT_CODE
	    WHERE
	        O.USER_CODE = #{user_code}
	        AND DATE(O.PAYMENT_DATE) = CURDATE() 
	    GROUP BY
	        O.ORDER_CODE
	    ORDER BY O.PAYMENT_DATE;
  	</select>
  	
  	<!-- 카페주문내역 조회하기(단건정보) -->
 	<select id="getOrderInfo" resultType="bookcafe.myPage.service.MyOrderDTO">
		WITH POINTLOG_RANKED AS (
		    SELECT
		        P.*,
		        ROW_NUMBER() OVER (PARTITION BY P.ORDER_CODE ORDER BY P.POINT_CODE DESC) AS RN
		    FROM
		        POINTLOG P
		)
		SELECT
		    O.*,
		    C.PRODUCT_CODE,
		    C.ORDER_QUANTITY,
		    F.PRODUCT_NAME,
		    P1.POINT_CODE AS POINT_CODE1,
		    P1.POINT_CHANGE AS POINT_CHANGE1,
		    P2.POINT_CODE AS POINT_CODE2,
		    P2.POINT_CHANGE AS POINT_CHANGE2
		FROM
		    ORDERS O
		JOIN CART C ON O.CART_CODE = C.CART_CODE
		JOIN FOOD F ON C.PRODUCT_CODE = F.PRODUCT_CODE
		LEFT JOIN POINTLOG_RANKED P1 ON O.ORDER_CODE = P1.ORDER_CODE AND P1.RN = 1
		LEFT JOIN POINTLOG_RANKED P2 ON O.ORDER_CODE = P2.ORDER_CODE AND P2.RN = 2
		WHERE
		    O.ORDER_CODE = #{order_code}
  	</select>
  	
 	<!-- 도서 대여내역 조회하기(전체내역) -->
 	<select id="getMyBookList" resultType="bookcafe.myPage.service.MyBookDTO">
		SELECT *
		FROM (
		    SELECT
		        BK.*,
		        BR.BORROW_CODE,
		        BR.USER_CODE,
		        O.ORDER_CODE,
		        O.PAYMENT_DATE,
		        SC.SEC_NAME,
		        CASE
	            WHEN RB.BOOK_CODE IS NOT NULL THEN '반납완료'
	            ELSE '대여중'
        END AS RETURN_STATE,
		        ROW_NUMBER() OVER (ORDER BY O.PAYMENT_DATE ASC) AS ROWNUM
		    FROM
		        BOOK BK
		    JOIN BORROW BR ON BR.BOOK_CODE = BK.BOOK_CODE
		    JOIN ORDERS O ON O.CART_CODE = BR.BORROW_CODE
		    JOIN SEC_CODE SC ON BK.BOOK_CATEGORY = SC.SEC_CODE
		    LEFT JOIN RETURN_BOOK RB ON RB.ORDER_CODE = O.ORDER_CODE 
	    							AND RB.BOOK_CODE = BK.BOOK_NAME
		    WHERE
		        O.USER_CODE = #{user_code}
   		        <if test="startDate != null and startDate != '' and endDate != null and endDate != ''">
	               	AND DATE_FORMAT(O.PAYMENT_DATE, '%Y%m%d') 
	               	BETWEEN DATE_FORMAT(#{startDate}, '%Y%m%d') AND DATE_FORMAT(#{endDate}, '%Y%m%d')
           		</if>
		) AS T
		ORDER BY ROWNUM DESC
  	</select>
  	
  	<!-- 도서 대여내역 조회하기(오늘날짜) -->
 	<select id="getMyBook" resultType="bookcafe.myPage.service.MyBookDTO">
	    SELECT
	        BK.*,
	        BR.BORROW_CODE,
	        BR.USER_CODE,
	        O.ORDER_CODE,
	        O.ORDER_STATE,
	        O.PAYMENT_DATE,
	        CASE
	            WHEN EXISTS (
	                SELECT 1
	                FROM RETURN_BOOK RB
	                WHERE RB.ORDER_CODE = O.ORDER_CODE
	                AND RB.BOOK_CODE = BK.BOOK_NAME
	            ) THEN '반납완료'
	            ELSE '대여중'
	        END AS RETURN_STATE
	    FROM
	        BOOK BK
	    JOIN BORROW BR ON BR.BOOK_CODE = BK.BOOK_CODE
	    JOIN ORDERS O ON O.CART_CODE = BR.BORROW_CODE
	    WHERE
	        O.USER_CODE = #{user_code}
	        AND DATE(O.PAYMENT_DATE) = CURDATE()
  	</select>
	
</mapper>