<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bookcafe.myPage.serviceImpl.MyPageMapper">

	<!-- 비밀번호 변경하기 -->
	<update id="updatePassword">
		update USER set
			user_pass = #{newPassword}
		where user_id = #{user_id}
	</update>
	
	<!-- 회원정보 수정하기 -->
	<update id="updateMember">
		update USER set
			user_tel = #{user_tel},
			user_email = #{user_email},
			user_address = #{user_address}
		where user_id = #{user_id}
	</update>
	
	<!-- 전화번호 중복 확인하기 -->
	<select id="checkDupTel" resultType="int">
		select count(user_tel) 
		from USER 
		where user_tel = #{user_tel}
	</select>

	<!-- 회원정보 삭제하기 -->
	<update id="deleteMember">
		update USER set
			user_authority = "5"
		where user_id = #{user_id}
	</update>
	
	<!-- 3개월 구매금액 조회하기 -->
	<select id="getMyPurchaseAmount" resultType="Integer">
		select sum(total_price) as total_purchase_amount
		from ORDERS
		where user_code = #{user_code} 
  		and payment_date >= date_sub(CURDATE(), INTERVAL 3 MONTH);
	</select>
	
	<!-- 카페주문내역 조회하기(전체내역) -->
 	<select id="getMyOrderList" resultType="bookcafe.myPage.service.MyOrderDTO">
		SELECT *
		FROM (
		    SELECT
		        O.*,
		        C.product_code,
		        F.product_name,
		        C.whole_quantity,
		        ROW_NUMBER() OVER (ORDER BY O.PAYMENT_DATE ASC) AS ROWNUM
		    FROM
		        ORDERS O
		    JOIN (
		        SELECT
		            cart_code,
		            product_code,
		            SUM(order_quantity) AS whole_quantity
		        FROM
		            CART
		        GROUP BY
		            cart_code
		    ) C ON O.cart_code = C.cart_code
		    JOIN FOOD F ON C.product_code = F.product_code
		    WHERE
		        O.user_code = #{user_code}
		    GROUP BY
		        O.order_code
		) AS T
		ORDER BY ROWNUM DESC;
  	</select>
  	
	<!-- 카페주문내역 조회하기(오늘날짜) -->
 	<select id="getMyOrder" resultType="bookcafe.myPage.service.MyOrderDTO">
		SELECT
        O.*,
        C.product_code,
        F.product_name,
        F.product_path,
        C.whole_quantity
	    FROM
	        ORDERS O
	    JOIN (
	        SELECT
	            cart_code,
	            product_code,
	            SUM(order_quantity) AS whole_quantity
	        FROM
	            CART
	        GROUP BY
	            cart_code
	    ) C ON O.cart_code = C.cart_code
	    JOIN FOOD F ON C.product_code = F.product_code
	    WHERE
	        O.user_code = #{user_code}
	        AND DATE(O.payment_date) = CURDATE() 
	    GROUP BY
	        O.order_code
	    ORDER BY O.payment_date;
  	</select>
  	
 	<!-- 도서 대여내역 조회하기(전체내역) -->
 	<select id="getMyBookList" resultType="bookcafe.myPage.service.MyBookDTO">
		SELECT *
		FROM (
		    SELECT
		        BK.*,
		        BR.BORROW_CODE,
		        BR.USER_CODE,
		        O.ORDER_CODE,
		        O.PAYMENT_DATE,
		        SC.SEC_NAME,
		        CASE
		            WHEN EXISTS (
		                SELECT 1
		                FROM RETURN_BOOK RB
		                WHERE RB.ORDER_CODE = O.ORDER_CODE
		                AND RB.BOOK_CODE = BK.BOOK_CODE
		            ) THEN '반납'
		            ELSE '대여중'
		        END AS RETURN_STATE,
		        ROW_NUMBER() OVER (ORDER BY O.PAYMENT_DATE ASC) AS ROWNUM
		    FROM
		        BOOK BK
		    JOIN BORROW BR ON BR.BOOK_CODE = BK.BOOK_CODE
		    JOIN ORDERS O ON O.CART_CODE = BR.BORROW_CODE
		    JOIN SEC_CODE SC ON BK.BOOK_CATEGORY = SC.SEC_CODE
		    WHERE
		        O.USER_CODE = #{user_code}
		) AS T
		ORDER BY ROWNUM DESC
  	</select>
  	
  	<!-- 도서 대여내역 조회하기(오늘날짜) -->
 	<select id="getMyBook" resultType="bookcafe.myPage.service.MyBookDTO">
	    SELECT
	        BK.*,
	        BR.BORROW_CODE,
	        BR.USER_CODE,
	        O.ORDER_CODE,
	        O.ORDER_STATE,
	        O.PAYMENT_DATE,
	        CASE
	            WHEN EXISTS (
	                SELECT 1
	                FROM RETURN_BOOK RB
	                WHERE RB.ORDER_CODE = O.ORDER_CODE
	                AND RB.BOOK_CODE = BK.BOOK_CODE
	            ) THEN '반납'
	            ELSE '대여중'
	        END AS RETURN_STATE
	    FROM
	        BOOK BK
	    JOIN BORROW BR ON BR.BOOK_CODE = BK.BOOK_CODE
	    JOIN ORDERS O ON O.CART_CODE = BR.BORROW_CODE
	    WHERE
	        O.USER_CODE = #{user_code}
	        AND DATE(O.payment_date) = CURDATE()
  	</select>
	
</mapper>