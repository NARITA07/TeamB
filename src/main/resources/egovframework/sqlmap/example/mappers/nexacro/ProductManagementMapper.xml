<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
	namespace="bookcafe.nexacro.productmanagement.serviceImpl.ProductManagementMapper">
	
	
	<insert id="img_path_book">
	INSERT 
	INTO 
	BOOK 	(BOOK_CODE, BOOK_NAME, BOOK_QUANTITY, BOOK_CATEGORY, BOOK_WRITER,BOOK_PUBLICATION_DATE,BOOK_PATH, BOOK_PRICE)
	VALUES	(fnCode('book'), "test", "Y", "test", "test", "test",#{path}, 0);
	</insert>
	
	<insert id="img_path_food">
	INSERT 
	INTO 
	FOOD	(PRODUCT_CODE, PRODUCT_NAME, PRODUCT_PRICE, PRODUCT_QUANTITY, PRODUCT_CATEGORY,PRODUCT_PATH) 
	VALUES	(fnCode('food'), "test", 0, 0, "test",#{path})
	</insert>



	<!-- 도서 저장 -->
	<update id="book_save">
	UPDATE BOOK 
	SET 
   		 BOOK_NAME = #{PRODUCT_NAME}, 
  		 BOOK_CATEGORY = #{SEC_CODE}, 
    	 BOOK_WRITER = #{PRODUCT_WRITER}, 
    	 BOOK_PUBLICATION_DATE = #{PRODUCT_BOOK_DATE}
	WHERE 
    	 BOOK_PATH = #{IMG_PATH};
	</update>
	
	
	<!-- 음식 저장 -->
	<update id="food_save">
	UPDATE FOOD 
	SET 
			PRODUCT_NAME = #{PRODUCT_NAME},
			PRODUCT_PRICE = #{PRODUCT_PRICE},
			PRODUCT_CATEGORY = #{SEC_CODE}
	WHERE 
			PRODUCT_PATH = #{IMG_PATH}
	</update>
	
	<delete id="delete_food">
	  DELETE FROM FOOD WHERE PRODUCT_CODE = #{PRODUCT_CODE}
	</delete>
	
	<delete id="delete_book">
	  DELETE FROM BOOK WHERE BOOK_CODE = #{PRODUCT_CODE}
	</delete>
	
	<update id="update_food">
	UPDATE 
			FOOD 
	SET
			 PRODUCT_NAME = #{PRODUCT_NAME}, 
			 PRODUCT_PRICE = #{PRODUCT_PRICE},
			 PRODUCT_PATH = #{PRODUCT_PATH}
	WHERE 
			PRODUCT_CODE = #{PRODUCT_CODE}
	
	</update>
	
	<update id="update_book">
	UPDATE 
			BOOK 
	SET 
			BOOK_NAME = #{PRODUCT_NAME}, 
			BOOK_PRICE = #{PRODUCT_PRICE},
			BOOK_PATH = #{PRODUCT_PATH},
			BOOK_WRITER = #{BOOK_WRITER},
			BOOK_PUBLICATION_DATE = #{BOOK_PUBLICATION_DATE}
	WHERE 
			BOOK_CODE = #{PRODUCT_CODE}
	</update>
	
	<select id="bookReturn" resultType="int">
	SELECT COUNT(BOOK_QUANTITY) FROM BOOK WHERE BOOK_QUANTITY = "N";
	</select>
	
	<update id="updatevipstatus">
 <![CDATA[
        UPDATE USER u
        SET u.USER_AUTHORITY = 
            CASE 
                WHEN u.USER_AUTHORITY = '1' AND 
                     (SELECT COALESCE(SUM(o.TOTAL_PRICE), 0) 
                      FROM ORDERS o 
                      WHERE o.USER_CODE = u.USER_CODE 
                        AND o.PAYMENT_DATE >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)) >= 100000 
                     THEN '2'
                WHEN u.USER_AUTHORITY = '2' AND 
                     (SELECT COALESCE(SUM(o.TOTAL_PRICE), 0) 
                      FROM ORDERS o 
                      WHERE o.USER_CODE = u.USER_CODE 
                        AND o.PAYMENT_DATE >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)) < 100000 
                     THEN '1'
                ELSE u.USER_AUTHORITY
            END
        WHERE EXISTS (
            SELECT 1 
            FROM ORDERS o 
            WHERE o.USER_CODE = u.USER_CODE 
              AND o.PAYMENT_DATE >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
        );
        ]]>
</update>

	
	<update id="updateuserleadbook">
	UPDATE USER SET USER_LEADBOOK = "N";
	</update>
	
    <insert id="product_allsavef">
	 insert into BOOK(BOOK_NAME, BOOK_QUANTITY, BOOK_CATEGORY,BOOK_WRITER,BOOK_PUBLICATION_DATE,BOOK_PATH,BOOK_PRICE) VALUES(#{제품명},'Y',#{분류명},#{저자}, #{출판일}, #{이미지}, '0')
    </insert>
    
    <insert id="product_allsaveb">
	 insert into sec_code
    </insert>

</mapper>