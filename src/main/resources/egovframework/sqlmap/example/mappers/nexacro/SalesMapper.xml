<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="bookcafe.nexacro.sales.serviceImpl.SalesMapper">

	<!-- 매출현황 SELECT -->
	<select id="selectSales" parameterType="java.util.Map" resultType="java.util.Map">
	    SELECT 
	    	O.ORDER_CODE,
	        U.USER_NAME AS NAME,
	        F.PRODUCT_NAME AS MENU,
	        C.ORDER_QUANTITY AS QUANTITY,
	        SUM(F.PRODUCT_PRICE * C.ORDER_QUANTITY) AS SALES,
	        DATE_FORMAT(STR_TO_DATE(O.PAYMENT_DATE, '%Y%m%d'), '%Y-%m-%d') AS TIME
	    FROM 
	        ORDERS O
	    INNER JOIN 
	        CART C ON O.CART_CODE = C.CART_CODE
	    INNER JOIN 
	        FOOD F ON C.PRODUCT_CODE = F.PRODUCT_CODE
	    INNER JOIN 
	        USER U ON C.USER_CODE = U.USER_CODE
	    WHERE 
	        O.ORDER_STATE = 3
	        <if test="NAME != null and NAME != ''">
	            AND U.USER_NAME LIKE CONCAT('%', #{NAME}, '%')
	        </if>
	        <if test="MENU != null and MENU != ''">
	            AND F.PRODUCT_NAME LIKE CONCAT('%', #{MENU}, '%')
	        </if>
	        <if test="DATE1 != null and DATE1 != '' and DATE2 != null and DATE2 != ''">
			    AND STR_TO_DATE(SUBSTRING(O.PAYMENT_DATE, 1, 8), '%Y%m%d') BETWEEN STR_TO_DATE(#{DATE1}, '%Y%m%d') AND STR_TO_DATE(#{DATE2}, '%Y%m%d')
			</if>
			<if
			   test="DATE1 != null and DATE1 != '' and (DATE2 == null or DATE2 == '')">
			   AND STR_TO_DATE(SUBSTRING(O.PAYMENT_DATE,1,8), '%Y%m%d') >= STR_TO_DATE(#{DATE1},'%Y%m%d')
			</if>
			<if
			   test="DATE2 != null and DATE2 != '' and (DATE1 == null or DATE1 == '')">
			   AND STR_TO_DATE(#{DATE2}, '%Y%m%d') >= STR_TO_DATE(SUBSTRING(O.PAYMENT_DATE,1,8), '%Y%m%d')
			</if>
	        <if test="SEC_CODE != null and SEC_CODE != ''">
	            AND F.PRODUCT_CATEGORY = #{SEC_CODE}
	        </if>
	    GROUP BY 
	    	O.ORDER_CODE,
	        U.USER_NAME,
	        F.PRODUCT_NAME,
	        O.PAYMENT_DATE
	    ORDER BY 
	        O.PAYMENT_DATE DESC,
	        SALES DESC
	</select>
	<!-- 도서 이력 조회 -->
	<select id="selectBookSales" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			'N' AS CHK,
		    T.USER_CODE AS NAME,
		    B.BOOK_NAME AS BOOK,
		    DATE_FORMAT(STR_TO_DATE(T.RETURN_DATE, '%Y%m%d'), '%Y-%m-%d') AS TIME
		FROM 
		    RETURN_BOOK T
		JOIN
			BOOK B ON T.BOOK_CODE = B.BOOK_NAME
		WHERE 
		    1=1
		    <if test="NAME != null and NAME != ''">
			    AND T.USER_CODE LIKE CONCAT('%', #{NAME}, '%')
			</if>
			<if test="BOOK != null and BOOK != ''">
			    AND B.BOOK_NAME LIKE CONCAT('%', #{BOOK}, '%')
			</if>
		    <if test="DATE1 != null and DATE1 != '' and DATE2 != null and DATE2 != ''">
			    AND STR_TO_DATE(SUBSTRING(T.RETURN_DATE, 1, 8), '%Y%m%d') BETWEEN STR_TO_DATE(#{DATE1}, '%Y%m%d') AND STR_TO_DATE(#{DATE2}, '%Y%m%d')
			</if>
		    <!-- 인풋날짜부터 이력 조회-->
			<if test="DATE1 != null and DATE1 != '' and (DATE2 == null or DATE2 == '')">
			   AND STR_TO_DATE(SUBSTRING(T.RETURN_DATE,1,8), '%Y%m%d') >= STR_TO_DATE(#{DATE1},'%Y%m%d')
			</if>
			<!-- 인풋날짜까지 이력 조회-->
			<if test="DATE2 != null and DATE2 != '' and (DATE1 == null or DATE1 == '')">
			   AND STR_TO_DATE(#{DATE2}, '%Y%m%d') >= STR_TO_DATE(SUBSTRING(T.RETURN_DATE,1,8), '%Y%m%d')
			</if>
		    <if test="SEC_CODE != null and SEC_CODE != ''">
		        AND B.BOOK_CATEGORY = #{SEC_CODE}
		    </if>
		GROUP BY
			T.USER_CODE,
			B.BOOK_NAME,
			T.RETURN_DATE
		ORDER BY 
		    STR_TO_DATE(T.RETURN_DATE, '%Y%m%d%H%m%s') DESC;
	</select>
	<select id="selectBookList" parameterType="java.util.Map" resultType="java.util.Map">
    WITH LatestBooks AS (
        SELECT 
            'N' AS CHK,
            U.USER_NAME AS NAME,
            B.BOOK_NAME AS BOOK,
            DATE_FORMAT(STR_TO_DATE(O.PAYMENT_DATE, '%Y%m%d'), '%Y-%m-%d') AS TIME,
            ROW_NUMBER() OVER (PARTITION BY B.BOOK_NAME ORDER BY STR_TO_DATE(O.PAYMENT_DATE, '%Y%m%d') DESC) AS rn
        FROM 
            ORDERS O
        JOIN 
            BORROW R ON O.CART_CODE = R.BORROW_CODE
        JOIN
            BOOK B ON R.BOOK_CODE = B.BOOK_CODE
        JOIN 
            USER U ON R.USER_CODE = U.USER_CODE
        WHERE 
            1=1
            <if test="NAME != null and NAME != ''">
                AND U.USER_NAME LIKE CONCAT('%', #{NAME}, '%')
            </if>
            <if test="BOOK != null and BOOK != ''">
                AND B.BOOK_NAME LIKE CONCAT('%', #{BOOK}, '%')
            </if>
            <if test="RETURN_YN != null and RETURN_YN != ''">
			    AND B.BOOK_QUANTITY LIKE CONCAT('%', #{RETURN_YN}, '%')
			</if>
            <if test="DATE1 != null and DATE1 != '' and DATE2 != null and DATE2 != ''">
                AND STR_TO_DATE(SUBSTRING(O.PAYMENT_DATE, 1, 8), '%Y%m%d') BETWEEN STR_TO_DATE(#{DATE1}, '%Y%m%d') AND STR_TO_DATE(#{DATE2}, '%Y%m%d')
            </if>
            <!-- 인풋날짜부터 이력 조회-->
            <if test="DATE1 != null and DATE1 != '' and (DATE2 == null or DATE2 == '')">
                AND STR_TO_DATE(SUBSTRING(O.PAYMENT_DATE,1,8), '%Y%m%d') >= STR_TO_DATE(#{DATE1},'%Y%m%d')
            </if>
            <!-- 인풋날짜까지 이력 조회-->
            <if test="DATE2 != null and DATE2 != '' and (DATE1 == null or DATE1 == '')">
                AND STR_TO_DATE(#{DATE2}, '%Y%m%d') >= STR_TO_DATE(SUBSTRING(O.PAYMENT_DATE,1,8), '%Y%m%d')
            </if>
            <if test="SEC_CODE != null and SEC_CODE != ''">
                AND B.BOOK_CATEGORY = #{SEC_CODE}
            </if>
    )
    SELECT 
        CHK,
        NAME,
        BOOK,
        TIME
    FROM 
        LatestBooks
    WHERE 
        rn = 1
    ORDER BY 
        STR_TO_DATE(TIME, '%Y%m%d%H%m%s');
</select>
	<!-- 중분류 콤보박스 -->
	<select id="selectSalesCombo" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT FIR_CODE, SEC_CODE, SEC_NAME
		FROM SEC_CODE
		WHERE 
		    1=1
			<if test="FIR_CODE != 'fir_000'">
	            AND FIR_CODE = #{FIR_CODE}
	        </if>
		ORDER BY SEC_CODE
	</select>
	<!-- 매출 차트 SELECT -->
	<select id="selectSalesChart" parameterType="java.util.Map" resultType="java.util.Map">
	    SELECT 
	        M.MONTH,
	        IFNULL(S.SALES, 0) AS SALES
	    FROM (
	        SELECT '01' AS MONTH UNION ALL
	        SELECT '02' UNION ALL
	        SELECT '03' UNION ALL
	        SELECT '04' UNION ALL
	        SELECT '05' UNION ALL
	        SELECT '06' UNION ALL
	        SELECT '07' UNION ALL
	        SELECT '08' UNION ALL
	        SELECT '09' UNION ALL
	        SELECT '10' UNION ALL
	        SELECT '11' UNION ALL
	        SELECT '12'
	    ) AS M
	    LEFT JOIN (
	        SELECT 
	            SUBSTRING(O.PAYMENT_DATE,5,2) AS MONTH,
	            SUM(F.PRODUCT_PRICE * C.ORDER_QUANTITY) AS SALES
	        FROM 
	            ORDERS O
	        INNER JOIN 
	            CART C ON O.CART_CODE = C.CART_CODE
	        INNER JOIN 
	            FOOD F ON C.PRODUCT_CODE = F.PRODUCT_CODE
	        INNER JOIN 
	            USER U ON C.USER_CODE = U.USER_CODE
	        WHERE 
	            O.ORDER_STATE = 3
	            <if test="NAME != null and NAME != ''">
	                AND U.USER_NAME = #{NAME}
	            </if>
	            <if test="MENU != null and MENU != ''">
	                AND F.PRODUCT_NAME = #{MENU}
	            </if>
	            <if test="YEAR != null and YEAR != ''">
	                AND SUBSTRING(O.PAYMENT_DATE,1,4) = #{YEAR}
	            </if>
	            <if test="SEC_CODE != null and SEC_CODE != ''">
	                AND F.PRODUCT_CATEGORY = #{SEC_CODE}
	            </if>
	        GROUP BY 
	            SUBSTRING(O.PAYMENT_DATE,5,2)
	    ) AS S ON M.MONTH = S.MONTH
	    ORDER BY 
	        M.MONTH
	</select>
	
	<update id="updateSelected" parameterType="java.util.Map">
		UPDATE BOOK
		SET
			BOOK_QUANTITY = CASE 
                          WHEN BOOK_QUANTITY = 'Y' THEN 'N'
                          WHEN BOOK_QUANTITY = 'N' THEN 'Y'
                          ELSE BOOK_QUANTITY
                      	  END
		WHERE BOOK_NAME = #{BOOK}
	</update>
	
	<insert id="insertSelected" parameterType="java.util.Map">
		<selectKey keyProperty="returnCode" resultType="string" order="BEFORE">
            SELECT fnCode('return') FROM DUAL
        </selectKey>
		INSERT INTO RETURN_BOOK(RETURN_CODE, BOOK_CODE, USER_CODE, RETURN_DATE)
		VALUES(#{returnCode},#{BOOK},#{NAME},date_format(now(),'%Y%m%d%H%m%s'))
	</insert>
	<delete id="deleteSelected" parameterType="java.util.Map">
		DELETE FROM RETURN_BOOK
		WHERE BOOK_CODE = #{BOOK}
	</delete>
</mapper>